---
layout: post
title: JRuby 1.7.3 Released
---
The JRuby community is pleased to announce the release of JRuby 1.7.3

- Homepage: [http://www.jruby.org/](http://www.jruby.org/)
- Download: [http://www.jruby.org/download](http://www.jruby.org/download)

**Alert** Please note the primary reason for putting out 1.7.3 was to address two security issues.  Everyone should upgrade to 1.7.3 (details on security issues below).

Note: This was a condensed release due to wanting to put out security fixes.  If the bugs you are waiting for have not been fixed we will be fixing them for 1.7.4.

JRuby 1.7.3 is our third update release since JRuby 1.7.0.  The primary goal of 1.7 point releases is to fill out any missing compatibility issues with Ruby 1.9.3.  The community participation lately has been great.  Keep reporting issues and sending pull requests.

Changes of note:
- Security fix (no CVE) for DOS using entity expansion in REXML
- Security fix (CVE-2013-0269) for unsafe object creation using JSON
- Relicensed from CPL to EPL
- Fixed one regression in windows java native launcher
- A few encoding issues resolved
- 42 issues fixed for 1.7.3

Note: These next two sections are write-ups by Aaron Patterson on the security issues.  JRuby 1.7.3 fixes both of these issues.  You only need to be aware of workarounds if it is impossible for you to update JRuby to version 1.7.3.

### Rexml DOS Fix

#### Impact 

When reading text nodes from an XML document, the REXML parser can be coerced in to allocating extremely large string objects which can consume all of the memory on a machine, causing a denial of service.

Impacted code will look something like this:

    document = REXML::Document.new some_xml_doc
    document.root.text

When the `text` method is called, entities will be expanded.  An attacker can send a relatively small XML document that, when the entities are resolved, will consume extreme amounts of memory on the target system.

Note that this attack is similar to, but different from the Billion Laughs attack.  This is also related to CVE-2013-1664.

All users running an affected release should either upgrade or use one of the work arounds immediately.

#### Workarounds 

If you cannot upgrade Ruby, use this monkey patch as a workaround:


    class REXML::Document
      @@entity_expansion_text_limit = 10_240
    
      def self.entity_expansion_text_limit=( val )
        @@entity_expansion_text_limit = val
      end
    
      def self.entity_expansion_text_limit
        @@entity_expansion_text_limit
      end
    end
    
    class REXML::Text
      def self.unnormalize(string, doctype=nil, filter=nil, illegal=nil)
        sum = 0
        string.gsub( /\r\n?/, "\n" ).gsub( REFERENCE ) {
          s = self.expand($&, doctype, filter)
          if sum + s.bytesize > REXML::Document.entity_expansion_text_limit
            raise "entity expansion has grown too large"
          else
            sum += s.bytesize
          end
          s
        }
      end
    
      def self.expand(ref, doctype, filter)
        if ref[1] == ?#
          if ref[2] == ?x
            [ref[3...-1].to_i(16)].pack('U*')
          else
            [ref[2...-1].to_i].pack('U*')
          end
        elsif ref == '&amp;'
          '&'
        elsif filter and filter.include?( ref[1...-1] )
          ref
        elsif doctype
          doctype.entity( ref[1...-1] ) or ref
        else
          entity_value = DocType::DEFAULT_ENTITIES[ ref[1...-1] ]
          entity_value ? entity_value.value : ref
        end
      end
    end

This monkey patch will limit the size of the entity substitutions to 10k per node.  REXML already defaults to only allow 10000 entity substitutions per document, so the maximum amount of text that can be generated by entity substitution will be around 98 megabytes.


### JSON Security Fix <a href="http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0269">CVE-2013-0269</a>

#### Impact 

When parsing certain JSON documents, the JSON gem can be coerced in to creating Ruby symbols in a target system.  Since Ruby symbols are not garbage collected, this can result in a denial of service attack.

The same technique can be used to create objects in a target system that act like internal objects.  These "act alike" objects can be used to bypass certain security mechanisms and can be used as a spring board for SQL injection attacks in Ruby on Rails.

Impacted code looks like this:

    JSON.parse(user_input)

Where the `user_input` variable will have a JSON document like this:

    {"json_class":"foo"}

The JSON gem will attempt to look up the constant "foo".  Looking up this constant will create a symbol.

In JSON version 1.7.x, objects with arbitrary attributes can be created using JSON documents like this:

    {"json_class":"JSON::GenericObject","foo":"bar"}

This document will result in an instance of JSON::GenericObject, with the attribute "foo" that has the value "bar".  Instantiating these objects will result in arbitrary symbol creation and in some cases can be used to bypass security measures.

PLEASE NOTE: this behavior *does not change* when using `JSON.load`.  `JSON.load` should *never* be given input from unknown sources.  If you are processing JSON from an unknown source, *always* use `JSON.parse`.

All users running an affected release should either upgrade or use one of the work arounds immediately. 

#### Workarounds 

For users that cannot upgrade, please use the attached patches.  If you cannot use the attached patches, change your code from this:

    JSON.parse(json)

To this:

    JSON.parse(json, :create_additions => false)

If you cannot change the usage of `JSON.parse` (for example you're using a gem which depends on `JSON.parse` like multi_json), then apply this monkey patch:

    module JSON
      class << self
        alias :old_parse :parse
        def parse(json, args = {})
          args[:create_additions] = false
          old_parse(json, args)
        end
      end
    end


### Jira Issues resolved for 1.7.3

<ul>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7058">JRUBY-7058</a> - NPE in BiVariableMap.getLocalVarNames() after clear()</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-6887">JRUBY-6887</a> - Thread.current.object_id inside an Enumerator is different from outside it</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7048">JRUBY-7048</a> - Kernel#gsub is not available when -p/-n command line option specified.</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7068">JRUBY-7068</a> - StringIO.open should accept any number of arguments</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7069">JRUBY-7069</a> - Dir.home(nil) should be my home</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7079">JRUBY-7079</a> - Uninitialized constant NameError should store a symbol and not a string</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-6793">JRUBY-6793</a> - Update bouncycastle jars to the latest version. (1.47)</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7081">JRUBY-7081</a> - Thread.current does not remain consistent between Fibers</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7091">JRUBY-7091</a> - Infinity should not be roundable :)</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7035">JRUBY-7035</a> - Rails 4 master doesn't start on JRuby 1.7.1 (OpenSSL::PKCS5)</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7001">JRUBY-7001</a> - maven jruby-rake-plugin classpath goal fails on windows</li>
<li><a href="https://jira.codehaus.org/browse/JRUBY-7084">JRUBY-7084</a> - Interaction between oh-my-zsh configuration and jruby shell script</li>
</ul>


### Github Issues resolved for 1.7.3

<ul>
<li><a href="https://github.com/jruby/jruby/issues/537">#537</a> - Add the complete text of the Eclipse Public License</li>
<li><a href="https://github.com/jruby/jruby/issues/536">#536</a> - Fix occasionally failing spec.</li>
<li><a href="https://github.com/jruby/jruby/issues/534">#534</a> - Fix Enumerable#find_each block arity </li>
<li><a href="https://github.com/jruby/jruby/issues/533">#533</a> - Default indy off for early IBM Java 7 releases #477</li>
<li><a href="https://github.com/jruby/jruby/issues/532">#532</a> - Current head switches on +indy before 1.7update14</li>
<li><a href="https://github.com/jruby/jruby/issues/529">#529</a> - Combination of Enumerable#each_slice and Array#transpose raises TypeError</li>
<li><a href="https://github.com/jruby/jruby/issues/528">#528</a> - fix samples/mvm.rb</li>
<li><a href="https://github.com/jruby/jruby/issues/526">#526</a> - Move to EPL from CPL</li>
<li><a href="https://github.com/jruby/jruby/issues/525">#525</a> - Unexpected behaviour of `Enumerator#find_index` with block (1.9 mode and HEAD)</li>
<li><a href="https://github.com/jruby/jruby/issues/519">#519</a> - nailgun missing in src package</li>
<li><a href="https://github.com/jruby/jruby/issues/518">#518</a> - Fix typos in "1.9/io/console.rb"</li>
<li><a href="https://github.com/jruby/jruby/issues/517">#517</a> - Rational/Float/Fixnum/Bignum `.to_s.encoding` is US-ASCII</li>
<li><a href="https://github.com/jruby/jruby/issues/516">#516</a> - krypt is not 1.8-compatible</li>
<li><a href="https://github.com/jruby/jruby/issues/512">#512</a> - Update json to 1.7.6</li>
<li><a href="https://github.com/jruby/jruby/issues/511">#511</a> - tty issue with drip</li>
<li><a href="https://github.com/jruby/jruby/issues/508">#508</a> - added Junit test to help fixing bug #7058</li>
<li><a href="https://github.com/jruby/jruby/issues/506">#506</a> - throw stringifies the name</li>
<li><a href="https://github.com/jruby/jruby/issues/504">#504</a> - Infinite loop (or performance issue) writing using MultiByteEncoding</li>
<li><a href="https://github.com/jruby/jruby/issues/494">#494</a> - FFI::MemoryPointer#free may cause JVM crashes</li>
<li><a href="https://github.com/jruby/jruby/issues/492">#492</a> - Add missing throw to default_internal=.</li>
<li><a href="https://github.com/jruby/jruby/issues/485">#485</a> - Resolve #482 Array#zip with infinite enum results in OOM</li>
<li><a href="https://github.com/jruby/jruby/issues/482">#482</a> - Combination of Array#zip and Array#cycle result in OOM</li>
<li><a href="https://github.com/jruby/jruby/issues/479">#479</a> - Fix write loss on concurrent ivar table growth</li>
<li><a href="https://github.com/jruby/jruby/issues/477">#477</a> - IBM J9 VM should also have INVOKEDYNAMIC_DEFAULT = false</li>
<li><a href="https://github.com/jruby/jruby/issues/470">#470</a> - Bignum#div raise ZeroDivisionError if the argument is Float zero</li>
<li><a href="https://github.com/jruby/jruby/issues/466">#466</a> - Bunch of fixes for IO.copy_stream</li>
<li><a href="https://github.com/jruby/jruby/issues/465">#465</a> - Add const_get to java package Fixes #435</li>
<li><a href="https://github.com/jruby/jruby/issues/464">#464</a> - [rfc] Support unmarshaling hashes created in MRI 1.9.1 with US-ASCII strings</li>
<li><a href="https://github.com/jruby/jruby/issues/457">#457</a> - Accept Encoding object for Encoding.compatible?</li>
<li><a href="https://github.com/jruby/jruby/issues/435">#435</a> - support for const_get() in java_package_module_template</li>
</ul>
